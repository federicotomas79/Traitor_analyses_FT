plot(res_pca$x[,c(1:2)], col = as.vector(hc_cl))
# find cluster center
hcluster_center = aggregate(res_pca$x[,c(1:3)], list(cluster = hc_cl), mean)
hcluster_center[,1:4]
require(sf)
rep_shape = cbind(
hcluster_center,
nearest_point = pca_x[
st_nearest_feature(
st_as_sf(hcluster_center, coords = c("PC1", "PC2")),
st_as_sf(pca_x, coords = c("PC1", "PC2"))
),
]$name
)
plot_shapes <- out_align5 %>%
coo_rotate(pi/2)
rep_list = list()
for (i in 1:length(rep_shape$nearest_point)){
rep_list[[i]] = filter(plot_shapes, sample == rep_shape[i,5])
}
dev.off()
#col_val = c("#E69F00", "#0072B2", "#009E73", "#D55E00", "black")
par(pty="s")
par(mfrow=c(1,1))
layout(matrix(c(1: length(rep_shape$cluster)),
length(rep_shape$cluster)/2, 2, byrow = TRUE),
widths=c(1), heights = rep.int(1, length(rep_shape$cluster)))
layout(matrix(c(1: length(rep_shape$cluster)),
ceiling(length(rep_shape$cluster)/2), 2, byrow = TRUE),
widths=c(1), heights = rep.int(1, length(rep_shape$cluster)))
2 * round(length(rep_shape$cluster)/2)
len = 2 * round(length(rep_shape$cluster)/2)
len = 2 * ceiling(length(rep_shape$cluster)/2)
len
dev.off()
#col_val = c("#E69F00", "#0072B2", "#009E73", "#D55E00", "black")
par(pty="s")
par(mfrow=c(1,1))
len = 2 * ceiling(length(rep_shape$cluster)/2)
layout(matrix(c(1: len), len/2, 2, byrow = TRUE),
widths=c(1), heights = rep.int(1, len))
for (i in 1:length(rep_shape$nearest_point)){
coo_plot(coo_smooth(rep_list[[i]]$coo, 1), points = FALSE, xy.axis=FALSE
#, col= col_val[i]
, ylim = c(-1.5, 1.5), xlim = c(-1.5, 1.5)
)
}
dev.off()
#col_val = c("#E69F00", "#0072B2", "#009E73", "#D55E00", "black")
par(mar = c(0, 0, 0, 0))
par(mfrow = c(1, 1))
for (i in 1:nrow(cl$centers)){
p = plot_shapes  %>%
filter(plot_shapes[[2]]$cl == i)
panel(p, c(200,20), col = col_val[i])
}
View(plot_shapes)
plot_shapes[[2]]$hc <- as.factor(hc_cl)
fac$hc <- as.factor(hc_cl)
par(mfrow=c(1,1))
out_align5[[2]]$hc <- as.factor(hc_cl)
plot_shapes <- out_align5 %>%
coo_rotate(pi/2)
rep_list = list()
for (i in 1:length(rep_shape$nearest_point)){
rep_list[[i]] = filter(plot_shapes, sample == rep_shape[i,5])
}
dev.off()
#col_val = c("#E69F00", "#0072B2", "#009E73", "#D55E00", "black")
par(pty="s")
par(mfrow=c(1,1))
len = 2 * ceiling(length(rep_shape$cluster)/2)
layout(matrix(c(1: len), len/2, 2, byrow = TRUE),
widths=c(1), heights = rep.int(1, len))
for (i in 1:length(rep_shape$nearest_point)){
coo_plot(coo_smooth(rep_list[[i]]$coo, 1), points = FALSE, xy.axis=FALSE
#, col= col_val[i]
, ylim = c(-1.5, 1.5), xlim = c(-1.5, 1.5)
)
}
dev.off()
#col_val = c("#E69F00", "#0072B2", "#009E73", "#D55E00", "black")
par(mar = c(0, 0, 0, 0))
par(mfrow = c(1, 1))
for (i in 1:nrow(cl$centers)){
p = plot_shapes  %>%
filter(plot_shapes[[2]]$cl == i)
panel(p, c(200,20), col = col_val[i])
}
dev.off()
nrow(hc_cl)
length(hc_cl)
nrow(rep_shape$cluster)
rep_shape$cluster
length(rep_shape$cluster)
for (i in 1:length(rep_shape$cluster)){
p = plot_shapes  %>%
filter(plot_shapes[[2]]$hc == i)
panel(p, c(200,20)
#, col = col_val[i]
)
}
dev.off()
for (i in 1:length(rep_shape$cluster)){
p = plot_shapes  %>%
filter(plot_shapes[[2]]$hc == i)
panel(p, c(200,20), cols=as.factor(fac$sp)
#, col = col_val[i]
)
}
dev.off()
#col_val = c("#E69F00", "#0072B2", "#009E73", "#D55E00", "black")
par(mar = c(0, 0, 0, 0))
par(mfrow = c(1, 1))
for (i in 1:length(rep_shape$cluster)){
p = plot_shapes  %>%
filter(plot_shapes[[2]]$hc == i)
panel(p, c(100,100), cols=as.factor(fac$sp)
#, col = col_val[i]
)
}
?panel
dev.off()
#col_val = c("#E69F00", "#0072B2", "#009E73", "#D55E00", "black")
par(mar = c(0, 0, 0, 0))
par(mfrow = c(1, 1))
for (i in 1:length(rep_shape$cluster)){
p = plot_shapes  %>%
filter(plot_shapes[[2]]$hc == i)
panel(p, cols=as.factor(fac$sp) #c(100,100)
#, col = col_val[i]
)
}
dev.off()
fit_hc=hclust(dist(res_pca$x[,c(1:3)]), method = "ward.D2") #
plot(fit_hc, labels = FALSE)
rect.hclust(fit_hc, k = 7)
hc_cl = factor(cutree(fit_hc, k = 7))  ## setting 4 clusters as output
plot(res_pca$x[,c(1:2)], col = as.vector(hc_cl))
out_align5[[2]]$hc <- as.factor(hc_cl)
fac$hc <- as.factor(hc_cl)
# find cluster center
hcluster_center = aggregate(res_pca$x[,c(1:3)], list(cluster = hc_cl), mean)
hcluster_center[,1:4]
require(sf)
rep_shape = cbind(
hcluster_center,
nearest_point = pca_x[
st_nearest_feature(
st_as_sf(hcluster_center, coords = c("PC1", "PC2")),
st_as_sf(pca_x, coords = c("PC1", "PC2"))
),
]$name
)
plot_shapes <- out_align5 %>%
coo_rotate(pi/2)
rep_list = list()
for (i in 1:length(rep_shape$nearest_point)){
rep_list[[i]] = filter(plot_shapes, sample == rep_shape[i,5])
}
dev.off()
#col_val = c("#E69F00", "#0072B2", "#009E73", "#D55E00", "black")
par(pty="s")
par(mfrow=c(1,1))
len = 2 * ceiling(length(rep_shape$cluster)/2)
layout(matrix(c(1: len), len/2, 2, byrow = TRUE),
widths=c(1), heights = rep.int(1, len))
for (i in 1:length(rep_shape$nearest_point)){
coo_plot(coo_smooth(rep_list[[i]]$coo, 1), points = FALSE, xy.axis=FALSE
#, col= col_val[i]
, ylim = c(-1.5, 1.5), xlim = c(-1.5, 1.5)
)
}
#col_val = c("#E69F00", "#0072B2", "#009E73", "#D55E00", "black")
par(mar = c(0, 0, 0, 0))
par(mfrow = c(1, 1))
for (i in 1:length(rep_shape$cluster)){
p = plot_shapes  %>%
filter(plot_shapes[[2]]$hc == i)
panel(p, cols=as.factor(fac$sp) #c(100,100)
#, col = col_val[i]
)
}
fac$sp
panel(p, cols = as.factor(fac$sp) #c(100,100)
#, col = col_val[i]
)
panel(p, cols = as.factor(plot_shapes[[2]]$sp) #c(100,100)
#, col = col_val[i]
)
fit_hc=hclust(dist(res_pca$x[,c(1:3)]), method = "average") #
plot(fit_hc, labels = FALSE)
rect.hclust(fit_hc, k = 7)
dev.off()
fit_hc=hclust(dist(res_pca$x[,c(1:3)]), method = "ward.D") #
plot(fit_hc, labels = FALSE)
rect.hclust(fit_hc, k = 7)
hc_cl = factor(cutree(fit_hc, k = 7))  ## setting 4 clusters as output
plot(res_pca$x[,c(1:2)], col = as.vector(hc_cl))
out_align5[[2]]$hc <- as.factor(hc_cl)
fac$hc <- as.factor(hc_cl)
# find cluster center
hcluster_center = aggregate(res_pca$x[,c(1:3)], list(cluster = hc_cl), mean)
hcluster_center[,1:4]
require(sf)
rep_shape = cbind(
hcluster_center,
nearest_point = pca_x[
st_nearest_feature(
st_as_sf(hcluster_center, coords = c("PC1", "PC2")),
st_as_sf(pca_x, coords = c("PC1", "PC2"))
),
]$name
)
plot_shapes <- out_align5 %>%
coo_rotate(pi/2)
rep_list = list()
for (i in 1:length(rep_shape$nearest_point)){
rep_list[[i]] = filter(plot_shapes, sample == rep_shape[i,5])
}
dev.off()
#col_val = c("#E69F00", "#0072B2", "#009E73", "#D55E00", "black")
par(pty="s")
par(mfrow=c(1,1))
len = 2 * ceiling(length(rep_shape$cluster)/2)
layout(matrix(c(1: len), len/2, 2, byrow = TRUE),
widths=c(1), heights = rep.int(1, len))
for (i in 1:length(rep_shape$nearest_point)){
coo_plot(coo_smooth(rep_list[[i]]$coo, 1), points = FALSE, xy.axis=FALSE
#, col= col_val[i]
, ylim = c(-1.5, 1.5), xlim = c(-1.5, 1.5)
)
}
filter(plot_shapes[[2]]$hc == i)
p
p[[2]]
p[[2]]$hc
p[[2]]$sp
#col_val = c("#E69F00", "#0072B2", "#009E73", "#D55E00", "black")
par(mar = c(0, 0, 0, 0))
par(mfrow = c(1, 1))
for (i in 1:length(rep_shape$cluster)){
p = plot_shapes  %>%
filter(plot_shapes[[2]]$hc == i)
panel(p, cols = as.factor(p[[2]]$sp) #c(100,100)
#, col = col_val[i]
)
}
#library(data.table)
#library(tidyr)
library(Momocs)
setwd("~/")
df_og = read.csv("NEW_measurements.csv")
#setwd("C:/Users/LocalAdmin/Personal - OneDrive/OneDrive/Artigos/2022 Dayrell et al datapaper seed traits/scripts")
setwd("~/Library/CloudStorage/OneDrive-Personal/Artigos/2022 Dayrell et al datapaper seed traits/scripts/csv")
df = read.csv("DiasMorph_v1.csv")
names(df)
df = df[,c(1:36)] # reducing size of df
length(levels(as.factor(df$scientificName))) #1439
length(levels(as.factor(df$genus))) #513
length(levels(as.factor(df$family))) #96
#getting rid of species with less than 5 reps for size comparison -------------
sp = table(df$group)
notEnough = names(sp)[sp < 5]
df = df[! (df$group %in% notEnough), ]
length(levels(as.factor(df$group)))
length(levels(as.factor(df$family)))
#getting rid of species with less than 5 reps for size comparison -------------
sp = table(df$group)
notEnough = names(sp)[sp < 5]
df = read.csv("DiasMorph_v1.csv")
names(df)
#names(df)
df = df[,c(1:10)] # reducing size of df
#getting rid of species with less than 5 reps for size comparison -------------
sp = table(df$group)
notEnough = names(sp)[sp < 5]
df = df[! (df$group %in% notEnough), ]
# removing species with more than one measurement
# (e.g., seed and diaspore) ----------------------------------------------------
colnames(df)
id_df = unique(df[,c(3:8)])
df_n_count = table(id_df$scientificName)
two_states = names(df_n_count)[df_n_count > 1]
df <- df[! (df$scientificName %in% two_states), ]
manual = read.csv("size.csv")
names(manual)
colnames(manual)[5] <- "manual_length"
colnames(manual)[6] <- "manual_width"
manual$old_number <- sapply(strsplit(manual$ID_scan.number,"Scannen"), `[`, 2)
manual$old_number <- as.numeric(manual$old_number)
sort(unique(manual$old_number))
new_scan_order = read.csv("new_scan_order.csv")
size <- (merge(manual, new_scan_order, by = 'old_number', all.y = FALSE, all.x = FALSE))
size <- size[,-c(1:5)]
colnames(size)[9] <- "group"
#head(unique(df[,c(3:7)]))
id = unique(df[,c(2:7)])
size = merge(id, size, by = "group")
size_count = size %>% count(spec.name.ORIG, sort = TRUE)
library(tidyverse)
library(DescTools)
size_count = size %>% count(spec.name.ORIG, sort = TRUE)
size_taxa <- subset(size_count, n<2)
size = merge.data.frame(size_taxa, size, by = "spec.name.ORIG", all.x = FALSE, all.y = FALSE)
colnames(df)
traitor_sum = as.data.frame(tapply(df[,9], df$spec.name.ORIG, mean)) #* 25.4/1200)
colnames(traitor_sum)[1] <-"traitor_length"
traitor_sum$ength_sd = tapply(df[,9], df$spec.name.ORIG, sd) #* 25.4/1200
colnames(traitor_sum)[2] <-"traitor_length_sd"
traitor_sum$width = tapply(df[,10], df$spec.name.ORIG, mean)# * 25.4/1200
colnames(traitor_sum)[3] <-"traitor_width"
traitor_sum$width_sd = tapply(df[,10], df$spec.name.ORIG, sd) #* 25.4/1200
colnames(traitor_sum)[4] <-"traitor_width_sd"
traitor_sum$spec.name.ORIG <- as.factor(row.names(traitor_sum))
summary(traitor_sum)
length(levels(as.factor(traitor_sum$spec.name.ORIG)))
merged = merge.data.frame(traitor_sum, size, by = "spec.name.ORIG", all.x = FALSE, all.y = FALSE)
merged = droplevels.data.frame(merged)
length(levels(as.factor(merged$spec.name.ORIG)))
names(merged)
data_prev = merged
str(data_prev)
data_prev$diff_len = abs(data_prev$manual_length - data_prev$traitor_length)
data_prev$diff_len_p = abs((data_prev$manual_length - data_prev$traitor_length)/data_prev$traitor_length)
data_prev$diff_len = abs(data_prev$manual_length - data_prev$traitor_length)
data_prev$diff_wid = abs(data_prev$manual_width - data_prev$traitor_width)
data_prev$diff_wid_p = abs((data_prev$manual_width - data_prev$traitor_width)/data_prev$traitor_width)
#data = subset(data_prev, !status=='exclude')
#data = subset(data_prev, !status=='exclude'  & !status=='ST fail')
data = subset(data_prev, !status=='exclude' & !status=='not sure' & !status=='ST fail')
names(data)
View(data)
summary(traitor_sum)
length(levels(as.factor(traitor_sum$spec.name.ORIG)))
View(data)
View(data)
# MANUAL MEASUREMENTS ----------------------------------------------------------
colnames(data)
data = data[,c(8,9,1,10:13,15:16)]
write.csv(data, "manual_measurements.csv")
View(data)
colnames(data)[8]
colnames(data)[8] <- "sd_manual_length"
colnames(data)[9] <- "sd_manual_width"
View(data)
write.csv(data, "manual_measurements.csv")
?merge.data.frame
names(manual)
manual = read.csv("manual_measurements.csv")
names(manual)
manual = read.csv("manual_measurements.csv")
names(manual)
data = merge.data.frame(traitor_sum, manual, by = c("scientificName", "scientificNameAuthorship", "spec.name.ORIG", "genus", "family"), all.x = FALSE, all.y = FALSE)
View(traitor_sum)
View(df)
# summary of DiasMorph (Traitor) measurements ----------------------------------
colnames(df)
traitor_sum <- df %>%
group_by("image_name","group","scientificName","scientificNameAuthorship","spec.name.ORIG","genus","family","missing_structures") %>%
summarise(traitor_length = mean(length), traitor_length_sd = sd(length), traitor_width = mean(width), traitor_width_sd = sd(width))
View(traitor_sum)
traitor_sum <- df %>%
group_by("scientificName","spec.name.ORIG") %>%
summarise(traitor_length = mean(length), traitor_length_sd = sd(length), traitor_width = mean(width), traitor_width_sd = sd(width))
View(traitor_sum)
traitor_sum <- df %>%
group_by("scientificName") %>%
summarise(traitor_length = mean(length), traitor_length_sd = sd(length), traitor_width = mean(width), traitor_width_sd = sd(width))
# summary of DiasMorph (Traitor) measurements ----------------------------------
colnames(df)
traitor_sum <- df %>%
group_by("scientificName") %>%
summarise(traitor_length = mean(length), traitor_length_sd = sd(length), traitor_width = mean(width), traitor_width_sd = sd(width))
print(traitor_sum)
df = as_tibble(df)
traitor_sum <- df %>%
group_by("scientificName") %>%
summarise(traitor_length = mean(length), traitor_length_sd = sd(length), traitor_width = mean(width), traitor_width_sd = sd(width))
print(traitor_sum)
df = read.csv("DiasMorph_v1.csv")
#names(df)
df = df[,c(1:10)] # reducing size of df
# getting rid of species with less than 5 reps for size comparison -------------
sp = table(df$group)
notEnough = names(sp)[sp < 5]
df = df[! (df$group %in% notEnough), ]
# removing species with more than one measurement ------------------------------
# (e.g., with and without specific appendages)
# increases the chances of comparing the same structures
colnames(df)
id_df = unique(df[,c(3:8)])
df_n_count = table(id_df$scientificName)
two_states = names(df_n_count)[df_n_count > 1]
df <- df[! (df$scientificName %in% two_states), ]
df_t = as_tibble(df)
df_t = group_by(df_t, scientificName)
traitor_sum <- df %>%
group_by("scientificName") %>%
summarise(traitor_length = mean(length), traitor_length_sd = sd(length), traitor_width = mean(width), traitor_width_sd = sd(width))
print(traitor_sum)
# summary of DiasMorph (Traitor) measurements ----------------------------------
str(df)
df$scientificName <- as.factor(df$scientificName)
df_t = as_tibble(df)
df_t = group_by(df_t, scientificName)
traitor_sum <- df %>%
group_by("scientificName") %>%
summarise(traitor_length = mean(length), traitor_length_sd = sd(length), traitor_width = mean(width), traitor_width_sd = sd(width))
print(traitor_sum)
View(df_t)
df_t
traitor_sum <- df_t %>%
group_by("scientificName") %>%
summarise(traitor_length = mean(length), traitor_length_sd = sd(length), traitor_width = mean(width), traitor_width_sd = sd(width))
print(traitor_sum)
traitor_sum <- df_t %>%
group_by(scientificName) %>%
summarise(traitor_length = mean(length), traitor_length_sd = sd(length), traitor_width = mean(width), traitor_width_sd = sd(width))
print(traitor_sum)
# summary of DiasMorph (Traitor) measurements ----------------------------------
names(df)
View(df)
traitor_sum <- df_t %>%
group_by(group, scientificName, scientificNameAuthorship, spec.name.ORIG, genus, family, missing_structures) %>%
summarise(traitor_length = mean(length), traitor_length_sd = sd(length), traitor_width = mean(width), traitor_width_sd = sd(width))
print(traitor_sum)
View(traitor_sum)
traitor_sum <- df_t %>%
group_by(scientificName, scientificNameAuthorship, spec.name.ORIG, genus, family, missing_structures) %>%
summarise(traitor_length = mean(length), traitor_length_sd = sd(length), traitor_width = mean(width), traitor_width_sd = sd(width))
View(traitor_sum)
traitor_sum <- df %>%
group_by(scientificName, scientificNameAuthorship, spec.name.ORIG, genus, family, missing_structures) %>%
summarise(traitor_length = mean(length), traitor_length_sd = sd(length), traitor_width = mean(width), traitor_width_sd = sd(width))
View(traitor_sum)
# summary of DiasMorph (Traitor) measurements ----------------------------------
names(df)
df
traitor_sum <- df %>%
group_by(scientificName, scientificNameAuthorship, spec.name.ORIG, genus, family, missing_structures) %>%
summarise(traitor_length = mean(length), traitor_length_sd = sd(length), traitor_width = mean(width), traitor_width_sd = sd(width))
print(traitor_sum)
data = merge.data.frame(traitor_sum, manual, by = c("scientificName", "scientificNameAuthorship", "spec.name.ORIG", "genus", "family"), all.x = FALSE, all.y = FALSE)
View(data)
length(levels(as.factor(data$scientificName)))
data = droplevels(data)
length(levels(as.factor(data$scientificName)))
View(data)
length(data)
str(data)
ccc_len = CCC(data$manual_length, data$traitor_length, ci = "z-transform", conf.level = 0.95)
ccc_len$rho.c
err_len = ccc_len$blalt
err_len$perc = ccc_len$blalt[,2]/ccc_len$blalt[,1]
check = subset(err_len, perc >= 0.05 | perc <= -0.05)
View(check)
View(check)
ccc_len$rho.c
ccc_wid = CCC(data$manual_width, data$traitor_width, ci = "z-transform", conf.level = 0.95)
ccc_wid$rho.c
require(ggplot2)
library(gridExtra)
g1 =
ggplot(data = data) +
geom_point(aes(x=manual_length , y = traitor_length), colour = "#0277BD", size = 1.2, alpha = 0.7) +
geom_abline(intercept = 0, slope = 1, colour = "black", size =0.5, linetype=5) +
geom_vline(xintercept = 10, lwd=0.8, colour="grey80", linetype=3) +
#  geom_line(data = pred_len, aes(x = manual_length, y = pred_l), linetype=5, colour = "black", size =0.5) +
ylab(paste("length Traitor (mm)")) +
xlab(paste("length manual (mm)")) +
annotate(geom = "text", label = "a", x = 1, y = 29, size = 5) +
# annotate(geom = "text", label = paste("n = ", length(data$spec.name.ORIG)), x = 27, y = 3.6, size = 4) +
# annotate(geom = "text", label = "italic(R) ^ 2 == 0.96", parse = TRUE, x = 27, y = 6.3, size = 4) +
theme_bw(base_size=12) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position="none")
g1
g2 =
ggplot(data = data) +
geom_point(aes(x=manual_width , y = traitor_width), colour = "#0277BD", size = 1.2, alpha = 0.7) +
geom_abline(intercept = 0, slope = 1, colour = "black", size =0.5, linetype=5) +
geom_vline(xintercept = 5, lwd=0.8, colour="grey80", linetype=3) +
ylab(paste("width Traitor (mm)")) +
xlab(paste("width manual (mm)")) +
annotate(geom = "text", label = "c", x = 0.7, y = 21, size = 5) +
theme_bw(base_size=12) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position="none")
g2
g3 =
ggplot(data = data) +
geom_point(aes(x=manual_length , y = traitor_length), colour = "#0277BD", size = 1.2, alpha = 0.7) +
geom_abline(intercept = 0, slope = 1, colour = "black", size =0.5, linetype=5) +
xlab(paste("length manual (mm)")) +
scale_y_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 2)) +
scale_x_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 2)) +
annotate(geom = "text", label = "b (detailed view)", x = 2.5, y = 9.5, size = 5) +
theme_bw(base_size=12) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position="none", axis.title.y = element_blank())
g3
g4 =
ggplot(data = data) +
geom_point(aes(x=manual_width , y = traitor_width), colour = "#0277BD", size = 1.2, alpha = 0.7) +
geom_abline(intercept = 0, slope = 1, colour = "grey30", linetype=5) +
xlab(paste("width manual (mm)")) +
ylim(0, 5) +
xlim(0, 5) +
annotate(geom = "text", label = "d (detailed view)", x = 1.3, y = 4.8, size = 5) +
theme_bw(base_size=12) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position="none", axis.title.y = element_blank())
pdf(file = "validation.pdf", width = 8, height = 6)
grid.arrange(arrangeGrob(g1,g3,g2,g4, as.table= TRUE, ncol=2, nrow=2, heights=c(5,5), widths=c(6.5,4.5)))
dev.off()
